#include "agent/energy_estimator.h"
#include "parser.h"
#include "agent/control_center.h"
#include "symmetry_util.h"
#include <gtest/gtest.h>

std::string seed_1 = R"(
    {"obs": {"units": {"position": [[[0, 1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]], [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]], "energy": [[103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]}, "units_mask": [[true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]], "sensor_mask": [[true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true]], "map_features": {"energy": [[8, 6, 4, 2, 0, -2, -4, -5, -5, -3, 0, 3, 4, 2, -2, -4, -4, -1, 1, 1, -3, -5, -3, 3], [2, 0, 0, 1, 3, 4, 4, 3, 1, 0, 1, 4, 8, 8, 6, 1, -1, 1, 3, 4, 0, -5, -6, -3], [-5, -5, -3, 0, 4, 7, 9, 9, 7, 3, 1, 2, 6, 9, 9, 5, 2, 2, 5, 8, 6, 0, -5, -5], [-5, -3, -1, 1, 3, 4, 6, 7, 6, 3, -1, -3, -1, 3, 5, 4, 1, 0, 3, 8, 9, 6, 0, -3], [3, 4, 4, 2, 0, -2, -1, 1, 2, 1, -2, -6, -6, -3, 1, 2, -1, -4, -3, 3, 8, 8, 4, 1], [9, 9, 7, 3, -1, -5, -6, -4, 0, 2, 1, -2, -5, -3, 0, 2, 0, -5, -6, -3, 3, 5, 3, 1], [7, 5, 3, 2, 0, -2, -4, -3, 1, 5, 7, 4, 1, 0, 3, 6, 5, -1, -5, -4, 0, 2, 1, -1], [-1, -3, -2, 1, 4, 4, 2, 1, 2, 6, 9, 8, 4, 1, 4, 8, 9, 5, 0, -1, 1, 2, -1, -4], [-6, -6, -4, 1, 6, 9, 7, 2, 0, 3, 6, 6, 2, -2, 0, 5, 8, 6, 2, 2, 4, 5, 1, -4], [-3, -2, -1, 2, 6, 8, 6, 0, -4, -3, 1, 2, -2, -5, -5, 0, 4, 3, 0, 1, 5, 9, 6, -2], [4, 5, 3, 1, 2, 4, 3, -2, -6, -5, 0, 2, -1, -5, -5, -2, 1, 0, -3, -3, 3, 9, 8, 2], [7, 9, 4, -2, -2, 0, 1, -2, -4, -2, 4, 7, 4, -1, -2, 2, 4, 1, -5, -6, -1, 6, 8, 4], [9, 6, -1, -5, -4, 1, 4, 2, 0, 2, 7, 9, 7, 2, 2, 6, 8, 4, -2, -6, -3, 2, 4, 3], [4, -1, -5, -6, -1, 5, 7, 4, 1, 3, 6, 7, 4, 0, 1, 6, 9, 7, 1, -2, -1, 1, 1, 0], [-2, -5, -6, -1, 5, 9, 7, 2, -1, 0, 3, 2, -2, -5, -3, 3, 6, 5, 2, 1, 3, 3, 0, -3], [-2, -4, -1, 5, 9, 8, 2, -3, -4, -1, 1, 0, -4, -6, -4, 0, 2, 1, 0, 2, 6, 7, 1, -5], [0, 1, 5, 9, 8, 2, -4, -6, -3, 2, 4, 2, -2, -2, 0, 2, 1, -3, -4, 1, 7, 9, 3, -5], [1, 4, 7, 7, 2, -4, -6, -4, 2, 7, 7, 4, 1, 3, 6, 7, 2, -4, -6, -1, 6, 9, 4, -4], [-2, 2, 4, 2, -3, -6, -4, 2, 8, 9, 5, 1, 0, 4, 8, 9, 4, -2, -5, -2, 4, 7, 4, -2], [-4, 0, 1, -1, -4, -3, 2, 8, 9, 5, -1, -4, -2, 2, 6, 6, 4, 0, -1, 0, 3, 4, 3, 0], [-2, 2, 3, 0, -1, 2, 7, 9, 5, -1, -6, -5, -2, 1, 2, 1, 1, 2, 3, 2, 1, 0, 1, 2], [4, 7, 6, 3, 1, 4, 7, 5, -1, -6, -5, -1, 4, 3, -1, -4, -2, 3, 7, 4, -1, -3, 0, 4], [7, 9, 7, 2, 0, 2, 4, 1, -4, -5, -1, 6, 9, 5, -2, -6, -3, 5, 9, 4, -3, -5, 0, 6], [4, 7, 4, -2, -4, -2, 1, 0, -2, -2, 4, 9, 7, 4, -3, -6, -1, 7, 9, 3, -5, -5, 2, 8]], "tile_type": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 2, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0]]}, "relic_nodes": [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]], "relic_nodes_mask": [false, false, false, false, false, false], "team_points": [0, 0], "team_wins": [0, 0], "steps": 2, "match_steps": 2}, "step": 2, "remainingOverageTime": 600, "player": "player_0", "info": {"env_cfg": {"max_units": 16, "match_count_per_episode": 5, "max_steps_in_match": 100, "map_height": 24, "map_width": 24, "num_teams": 2, "unit_move_cost": 3, "unit_sap_cost": 30, "unit_sap_range": 6, "unit_sensor_range": 1}}}
    )";

std::string seed_2 = R"(
    {"obs": {"units": {"position": [[[0, 1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]], [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]], "energy": [[98, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]}, "units_mask": [[true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]], "sensor_mask": [[true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true]], "map_features": {"energy": [[9, 1, -6, -4, 5, 9, 4, -5, -6, 2, 9, 6, -2, -7, -1, 7, 9, 2, -5, -6, -3, -1, -3, -6], [9, 1, -6, -3, 6, 9, 3, -5, -5, 3, 9, 5, -4, -6, 1, 9, 7, -1, -7, -3, 5, 8, 5, -3], [8, 0, -6, -3, 6, 9, 3, -5, -5, 4, 9, 5, -4, -6, 2, 9, 7, -2, -7, -1, 8, 8, 8, -1], [9, 1, -6, -3, 6, 9, 3, -5, -5, 3, 9, 5, -4, -6, 1, 9, 7, -1, -7, -3, 5, 8, 5, -3], [9, 1, -6, -4, 5, 9, 4, -5, -6, 2, 9, 6, -2, -7, -1, 7, 9, 2, -5, -6, -3, -1, -3, -6], [9, 3, -5, -5, 4, 9, 5, -4, -6, 0, 8, 8, 0, -6, -4, 4, 9, 7, 0, -5, -7, -7, -7, -5], [9, 4, -4, -6, 2, 9, 7, -1, -7, -2, 6, 9, 3, -4, -6, 0, 7, 9, 7, 2, -1, -2, -1, 2], [9, 6, -3, -6, -1, 8, 9, 1, -6, -5, 3, 9, 7, 0, -6, -5, 1, 7, 9, 9, 7, 7, 7, 9], [8, 8, 0, -6, -3, 5, 9, 5, -4, -6, -1, 7, 9, 5, -2, -6, -5, 0, 4, 7, 9, 9, 9, 7], [7, 9, 3, -5, -6, 2, 9, 8, 0, -6, -5, 2, 8, 9, 4, -2, -6, -6, -4, -1, 1, 2, 1, -1], [4, 9, 6, -2, -7, -2, 6, 9, 5, -3, -7, -3, 3, 9, 9, 5, 0, -4, -6, -7, -6, -6, -6, -7], [0, 8, 9, 2, -5, -5, 1, 8, 9, 3, -4, -6, -3, 3, 8, 9, 7, 3, 0, -2, -4, -4, -4, -2], [-3, 5, 9, 6, -2, -7, -3, 4, 9, 8, 1, -5, -6, -3, 2, 7, 9, 9, 8, 6, 5, 5, 5, 6], [-6, 1, 8, 9, 3, -4, -6, -1, 6, 9, 7, 1, -4, -7, -5, -1, 3, 6, 8, 9, 9, 9, 9, 9], [-6, -4, 4, 9, 7, 0, -6, -6, 0, 6, 9, 8, 3, -3, -6, -6, -5, -2, 0, 2, 3, 4, 3, 2], [-4, -6, -1, 6, 9, 6, -1, -6, -6, 0, 6, 9, 9, 5, 0, -4, -6, -7, -6, -6, -5, -5, -5, -6], [0, -6, -5, 1, 7, 9, 5, -1, -6, -6, -1, 4, 8, 9, 8, 5, 1, -1, -4, -5, -5, -5, -5, -5], [6, -2, -6, -5, 2, 8, 9, 5, -1, -6, -6, -3, 1, 6, 9, 9, 9, 7, 5, 4, 3, 3, 3, 4], [9, 4, -3, -7, -4, 2, 8, 9, 6, 0, -4, -7, -5, -2, 2, 5, 8, 9, 9, 9, 9, 9, 9, 9], [9, 9, 3, -4, -7, -4, 2, 7, 9, 7, 3, -2, -5, -7, -6, -3, -1, 2, 4, 5, 6, 6, 6, 5], [4, 9, 8, 2, -4, -7, -5, 1, 6, 9, 9, 6, 2, -2, -5, -6, -6, -6, -5, -4, -3, -3, -3, -4], [-2, 5, 9, 8, 3, -3, -6, -5, -1, 4, 8, 9, 9, 6, 3, 0, -3, -4, -5, -6, -6, -6, -6, -6], [-6, -2, 5, 9, 9, 4, -2, -6, -6, -4, 1, 5, 8, 9, 9, 8, 6, 4, 3, 1, 1, 0, 1, 1], [-6, -6, -2, 4, 9, 9, 6, 0, -4, -6, -6, -3, 0, 4, 7, 8, 9, 9, 9, 9, 9, 8, 9, 9]], "tile_type": [[0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 1, 1, 1, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 1, 2, 0, 0], [1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [1, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 2, 2, 0, 0, 0, 0, 0, 1, 1, 2, 2, 0, 0, 2, 2, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0]]}, "relic_nodes": [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]], "relic_nodes_mask": [false, false, false, false, false, false], "team_points": [0, 0], "team_wins": [0, 0], "steps": 2, "match_steps": 2}, "step": 2, "remainingOverageTime": 600, "player": "player_0", "info": {"env_cfg": {"max_units": 16, "match_count_per_episode": 5, "max_steps_in_match": 100, "map_height": 24, "map_width": 24, "num_teams": 2, "unit_move_cost": 3, "unit_sap_cost": 30, "unit_sap_range": 6, "unit_sensor_range": 1}}}
    )";

std::string seed_4 = R"(
    {"obs": {"units": {"position": [[[0, 1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]], [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]], "energy": [[96, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]}, "units_mask": [[true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]],  "sensor_mask": [[true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true]], "map_features": {"energy": [[1, 1, 2, 2, 3, 2, 1, 1, 1, 1, 2, 2, 1, 0, 0, -1, 0, 1, 4, 7, 9, 8, 3, -3], [1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 0, -1, -2, -4, -4, -3, 1, 6, 9, 8, 3], [1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, -1, -3, -5, -5, -1, 5, 9, 8], [2, 2, 2, 2, 1, 1, 1, 2, 3, 2, 2, 2, 2, 3, 4, 5, 5, 3, -1, -5, -6, -1, 6, 9], [2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 3, 4, 6, 8, 9, 6, 0, -5, -5, 1, 7], [1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 4, 8, 10, 6, -1, -5, -3, 4], [1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, -2, -4, -3, 2, 8, 9, 3, -3, -4, 1], [0, 0, 2, 3, 3, 1, 1, 1, 2, 2, 2, 2, 3, 2, -1, -4, -6, -3, 4, 8, 5, -1, -4, 0], [0, 0, 2, 4, 3, 0, 0, 1, 3, 3, 1, 1, 2, 1, 3, 0, -4, -4, 1, 6, 5, 1, -2, -1], [-1, -1, 2, 5, 3, 0, -1, 1, 4, 4, 1, -2, -1, 3, 5, 3, -1, -2, 1, 4, 4, 1, -1, 0], [-1, -1, 2, 5, 4, -1, -2, 1, 5, 6, 1, -4, -4, 0, 3, 1, 2, 1, 1, 3, 3, 1, 0, 0], [-1, -2, 2, 6, 5, 0, -4, -1, 5, 8, 4, -3, -6, -4, -1, 2, 3, 2, 2, 2, 2, 1, 1, 1], [-1, -3, 1, 6, 6, 1, -4, -3, 3, 9, 8, 2, -3, -4, -2, 1, 2, 2, 1, 1, 2, 2, 1, 2], [0, -4, -1, 5, 8, 4, -3, -5, -1, 6, 10, 8, 4, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2], [2, -4, -4, 2, 8, 7, 1, -5, -5, 0, 6, 9, 8, 6, 4, 3, 2, 1, 1, 2, 2, 2, 2, 1], [5, -2, -5, -1, 6, 9, 6, -1, -6, -5, -1, 3, 5, 5, 4, 3, 2, 2, 2, 2, 3, 2, 1, 1], [7, 1, -5, -5, 1, 8, 9, 5, -1, -5, -5, -3, -1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1], [9, 5, -2, -6, -4, 3, 8, 9, 6, 1, -3, -4, -4, -2, -1, 0, 1, 1, 2, 2, 1, 1, 1, 1], [8, 9, 3, -3, -6, -3, 3, 8, 9, 7, 4, 1, 0, -1, 0, 0, 1, 2, 2, 1, 1, 1, 1, 2], [4, 9, 8, 2, -4, -6, -4, 1, 6, 8, 8, 6, 5, 4, 3, 3, 3, 2, 2, 1, 1, 2, 2, 3], [-2, 5, 9, 8, 2, -3, -6, -5, -1, 2, 5, 6, 6, 5, 5, 4, 3, 2, 2, 2, 2, 2, 2, 2], [-6, -1, 6, 9, 8, 3, -2, -5, -5, -4, -1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2], [-6, -6, -1, 5, 9, 9, 5, 1, -2, -4, -4, -3, -2, -1, -1, 0, 0, 1, 1, 2, 2, 2, 1, 1], [-1, -6, -6, -2, 4, 8, 9, 7, 5, 2, 0, -1, -1, -1, -1, 0, 0, 1, 1, 2, 2, 1, 1, 1]], "tile_type": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 1, 1, 0, 0, 2, 2, 0], [2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 2], [0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [2, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1], [2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 2], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 1, 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 2, 0, 1, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 2, 0, 0], [0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, 2, 0, 0], [0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 1, 2, 2, 0, 2, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 2, 0, 0, 2, 0, 2, 0]]}, "relic_nodes": [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]], "relic_nodes_mask": [false, false, false, false, false, false], "team_points": [0, 0], "team_wins": [0, 0], "steps": 2, "match_steps": 2}, "step": 2, "remainingOverageTime": 600, "player": "player_0", "info": {"env_cfg": {"max_units": 16, "match_count_per_episode": 5, "max_steps_in_match": 100, "map_height": 24, "map_width": 24, "num_teams": 2, "unit_move_cost": 5, "unit_sap_cost": 31, "unit_sap_range": 5, "unit_sensor_range": 1}}}
    )";

class EnergyEstimatorTest : public ::testing::Test {
    protected:
        GameMap* gameMap;
        void SetUp() override {
            Logger::getInstance().enableLogging("../../test.log");

        }

        void TearDown() override {
            delete gameMap;
        }
};

TEST_F(EnergyEstimatorTest, Seed1) {
    Logger::getInstance().setPlayerName("Seed1");

    GameState gameState = parse (seed_1);
    ControlCenter* cc = new ControlCenter();
    cc->update(gameState); 

    EnergyEstimator* ee = new EnergyEstimator(*cc->gameMap);
    
    ee->updateEnergyNodes();

    int energyNodeTileId = symmetry_utils::toID(11, 0);
    EXPECT_EQ(ee->getEnergyNode(), energyNodeTileId);
}

TEST_F(EnergyEstimatorTest, Seed2) {
    Logger::getInstance().setPlayerName("Seed2");

    GameState gameState = parse (seed_2);
    ControlCenter* cc = new ControlCenter();
    cc->update(gameState); 

    EnergyEstimator* ee = new EnergyEstimator(*cc->gameMap);
    ee->updateEnergyNodes();
    
    int energyNodeTileId = symmetry_utils::toID(2, 21);
    EXPECT_EQ(ee->getEnergyNode(), energyNodeTileId);
}

TEST_F(EnergyEstimatorTest, Seed4) {
    Logger::getInstance().setPlayerName("Seed4");

    GameState gameState = parse (seed_4);
    ControlCenter* cc = new ControlCenter();
    cc->update(gameState); 

    EnergyEstimator* ee = new EnergyEstimator(*cc->gameMap);

    ee->updateEnergyNodes();
    
    int energyNodeTileId = symmetry_utils::toID(8, 13);
    EXPECT_EQ(ee->getEnergyNode(), energyNodeTileId);
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}